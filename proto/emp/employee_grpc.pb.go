// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: employee.proto

package emp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeManagementClient is the client API for EmployeeManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeManagementClient interface {
	// get the Employee details by providing the employee ID
	// Returns Status.NOT_FOUND if the ID doesn't match any Employee
	GetEmployee(ctx context.Context, in *EmployeeID, opts ...grpc.CallOption) (*Employee, error)
	// List all the employees. It taks empty request type
	ListEmployees(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EmployeeManagement_ListEmployeesClient, error)
	// Create an emplyee by providing the Employee Details and returns the Employee ID
	// Returns Status.INTERNAL if the Employee is not able to create
	// Reutrns Status.AlreadyExists if the id already exists
	CreateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*EmployeeID, error)
	// Update an Employee by providing all the inforation again and returns empty
	// Returns Status.NOT_FOUND if the ID doesn't match any Employee
	// Returns Status.INTERNAL if the Employee is not able to update
	UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Updates only the field we mention while calling this RPC
	// Returns Status.NOT_FOUND if the ID doesn't match any Employee
	PatchEmployee(ctx context.Context, in *UpdateEmpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete the Employee by providing the Employee ID and empty response is returned
	// Returns Status.NOT_FOUND if the ID doesn't match any Employee
	// Returns Status.INTERNAL if the Employee is not able to delete
	DeleteEmployee(ctx context.Context, in *EmployeeID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type employeeManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeManagementClient(cc grpc.ClientConnInterface) EmployeeManagementClient {
	return &employeeManagementClient{cc}
}

func (c *employeeManagementClient) GetEmployee(ctx context.Context, in *EmployeeID, opts ...grpc.CallOption) (*Employee, error) {
	out := new(Employee)
	err := c.cc.Invoke(ctx, "/EmployeeManagement/getEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) ListEmployees(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (EmployeeManagement_ListEmployeesClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmployeeManagement_ServiceDesc.Streams[0], "/EmployeeManagement/listEmployees", opts...)
	if err != nil {
		return nil, err
	}
	x := &employeeManagementListEmployeesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmployeeManagement_ListEmployeesClient interface {
	Recv() (*Employee, error)
	grpc.ClientStream
}

type employeeManagementListEmployeesClient struct {
	grpc.ClientStream
}

func (x *employeeManagementListEmployeesClient) Recv() (*Employee, error) {
	m := new(Employee)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *employeeManagementClient) CreateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*EmployeeID, error) {
	out := new(EmployeeID)
	err := c.cc.Invoke(ctx, "/EmployeeManagement/createEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) UpdateEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/EmployeeManagement/updateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) PatchEmployee(ctx context.Context, in *UpdateEmpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/EmployeeManagement/patchEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeManagementClient) DeleteEmployee(ctx context.Context, in *EmployeeID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/EmployeeManagement/deleteEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeManagementServer is the server API for EmployeeManagement service.
// All implementations must embed UnimplementedEmployeeManagementServer
// for forward compatibility
type EmployeeManagementServer interface {
	// get the Employee details by providing the employee ID
	// Returns Status.NOT_FOUND if the ID doesn't match any Employee
	GetEmployee(context.Context, *EmployeeID) (*Employee, error)
	// List all the employees. It taks empty request type
	ListEmployees(*emptypb.Empty, EmployeeManagement_ListEmployeesServer) error
	// Create an emplyee by providing the Employee Details and returns the Employee ID
	// Returns Status.INTERNAL if the Employee is not able to create
	// Reutrns Status.AlreadyExists if the id already exists
	CreateEmployee(context.Context, *Employee) (*EmployeeID, error)
	// Update an Employee by providing all the inforation again and returns empty
	// Returns Status.NOT_FOUND if the ID doesn't match any Employee
	// Returns Status.INTERNAL if the Employee is not able to update
	UpdateEmployee(context.Context, *Employee) (*emptypb.Empty, error)
	// Updates only the field we mention while calling this RPC
	// Returns Status.NOT_FOUND if the ID doesn't match any Employee
	PatchEmployee(context.Context, *UpdateEmpRequest) (*emptypb.Empty, error)
	// Delete the Employee by providing the Employee ID and empty response is returned
	// Returns Status.NOT_FOUND if the ID doesn't match any Employee
	// Returns Status.INTERNAL if the Employee is not able to delete
	DeleteEmployee(context.Context, *EmployeeID) (*emptypb.Empty, error)
	mustEmbedUnimplementedEmployeeManagementServer()
}

// UnimplementedEmployeeManagementServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeManagementServer struct {
}

func (UnimplementedEmployeeManagementServer) GetEmployee(context.Context, *EmployeeID) (*Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedEmployeeManagementServer) ListEmployees(*emptypb.Empty, EmployeeManagement_ListEmployeesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEmployees not implemented")
}
func (UnimplementedEmployeeManagementServer) CreateEmployee(context.Context, *Employee) (*EmployeeID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedEmployeeManagementServer) UpdateEmployee(context.Context, *Employee) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (UnimplementedEmployeeManagementServer) PatchEmployee(context.Context, *UpdateEmpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEmployee not implemented")
}
func (UnimplementedEmployeeManagementServer) DeleteEmployee(context.Context, *EmployeeID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedEmployeeManagementServer) mustEmbedUnimplementedEmployeeManagementServer() {}

// UnsafeEmployeeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeManagementServer will
// result in compilation errors.
type UnsafeEmployeeManagementServer interface {
	mustEmbedUnimplementedEmployeeManagementServer()
}

func RegisterEmployeeManagementServer(s grpc.ServiceRegistrar, srv EmployeeManagementServer) {
	s.RegisterService(&EmployeeManagement_ServiceDesc, srv)
}

func _EmployeeManagement_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeManagement/getEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).GetEmployee(ctx, req.(*EmployeeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_ListEmployees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmployeeManagementServer).ListEmployees(m, &employeeManagementListEmployeesServer{stream})
}

type EmployeeManagement_ListEmployeesServer interface {
	Send(*Employee) error
	grpc.ServerStream
}

type employeeManagementListEmployeesServer struct {
	grpc.ServerStream
}

func (x *employeeManagementListEmployeesServer) Send(m *Employee) error {
	return x.ServerStream.SendMsg(m)
}

func _EmployeeManagement_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeManagement/createEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).CreateEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeManagement/updateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).UpdateEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_PatchEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).PatchEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeManagement/patchEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).PatchEmployee(ctx, req.(*UpdateEmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeManagement_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeManagementServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeManagement/deleteEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeManagementServer).DeleteEmployee(ctx, req.(*EmployeeID))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeManagement_ServiceDesc is the grpc.ServiceDesc for EmployeeManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmployeeManagement",
	HandlerType: (*EmployeeManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getEmployee",
			Handler:    _EmployeeManagement_GetEmployee_Handler,
		},
		{
			MethodName: "createEmployee",
			Handler:    _EmployeeManagement_CreateEmployee_Handler,
		},
		{
			MethodName: "updateEmployee",
			Handler:    _EmployeeManagement_UpdateEmployee_Handler,
		},
		{
			MethodName: "patchEmployee",
			Handler:    _EmployeeManagement_PatchEmployee_Handler,
		},
		{
			MethodName: "deleteEmployee",
			Handler:    _EmployeeManagement_DeleteEmployee_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listEmployees",
			Handler:       _EmployeeManagement_ListEmployees_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "employee.proto",
}
